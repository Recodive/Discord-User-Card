/* eslint-disable no-console */
import { readFile, writeFile } from "node:fs/promises";
import type { UnicodeEmoji } from "./UnicodeEmoji.js";
import type { FinalEmoji } from "./types.js";
import { uploadToCdn } from "./uploadToCdn.js";

const header = `/**
 * This file was generated by tools/generate-emojis.
 * Do not modify this file manually.
 *
 * @version ${new Date().toISOString()}
 */`;
const interfaceText = `export interface Emoji {
	category: string;
	names: string[];
	surrogates: string[];
	asset: string;
}`;
export async function toFile(
	emojis: UnicodeEmoji[],
	svgMap: Record<string, string>,
) {
	const allEmojis = emojis.flatMap((emoji) => {
		return [emoji, ...emoji.diversityChildrenArray];
	});

	console.log(
		`A total of ${
			allEmojis.length
			} emojis were found (including diversity children).`,
	);

	const finalEmojis: FinalEmoji[] = [];
	for (const emoji of allEmojis) {
		const url = emoji.getDiscordURL(svgMap);
		if (!url)
			continue;

		const emojiObject: FinalEmoji = {
			asset: await uploadToCdn(
				url,
				`https://cdn.rcd.gg/discord/emojis/${emoji.emoji.names[0]}.svg`,
			),
			category: emoji.category,
			names: emoji.emoji.names,
			surrogates: [
				emoji.emoji.surrogates,
				...(emoji.processedSurrogates !== emoji.emoji.surrogates
					? [emoji.processedSurrogates]
					: []),
			],
		};

		finalEmojis.push(emojiObject);

		console.log(
			`Processed ${finalEmojis.length}/${allEmojis.length} emojis...`,
		);
	}

	const finalFile = `${header}

${interfaceText}

export const emojis: Emoji[] = ${JSON.stringify(finalEmojis, null, 2)}`;

	// ? Compare this snippet to the existing file at packages/emojis/src/emojis.ts
	const existingFileLocation = new URL(
		"../../../packages/emojis/src/emojis.ts",
		import.meta.url,
	).pathname;
	const existingFile = await readFile(existingFileLocation, "utf-8");

	// ? Compare without the header
	const existingFileWithoutHeader = existingFile.slice(
		existingFile.indexOf("export interface Emoji"),
		existingFile.length,
	);
	const newFileWithoutHeader = finalFile.slice(
		finalFile.indexOf("export interface Emoji"),
		finalFile.length,
	);
	if (existingFileWithoutHeader === newFileWithoutHeader) {
		console.log("No changes detected.");
		return;
	}

	console.log("Writing to file...");
	await writeFile(
		new URL("../../../packages/emojis/src/emojis.ts", import.meta.url).pathname,
		finalFile,
	);
}
